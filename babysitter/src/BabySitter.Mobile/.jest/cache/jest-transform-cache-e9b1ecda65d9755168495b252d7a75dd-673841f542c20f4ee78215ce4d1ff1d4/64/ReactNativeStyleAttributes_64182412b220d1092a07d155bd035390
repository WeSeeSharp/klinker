6588018a59a4047b0db8c9811be25c34


'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ImageStylePropTypes = require('ImageStylePropTypes');
var TextStylePropTypes = require('TextStylePropTypes');
var ViewStylePropTypes = require('ViewStylePropTypes');

var keyMirror = require('fbjs/lib/keyMirror');
var processColor = require('processColor');
var processTransform = require('processTransform');
var sizesDiffer = require('sizesDiffer');

var ReactNativeStyleAttributes = _extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

ReactNativeStyleAttributes.transform = { process: processTransform };
ReactNativeStyleAttributes.shadowOffset = { diff: sizesDiffer };

var colorAttributes = { process: processColor };
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.borderStartColor = colorAttributes;
ReactNativeStyleAttributes.borderEndColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;

module.exports = ReactNativeStyleAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwia2V5TWlycm9yIiwicHJvY2Vzc0NvbG9yIiwicHJvY2Vzc1RyYW5zZm9ybSIsInNpemVzRGlmZmVyIiwiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJ0cmFuc2Zvcm0iLCJwcm9jZXNzIiwic2hhZG93T2Zmc2V0IiwiZGlmZiIsImNvbG9yQXR0cmlidXRlcyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJTdGFydENvbG9yIiwiYm9yZGVyRW5kQ29sb3IiLCJjb2xvciIsInNoYWRvd0NvbG9yIiwidGV4dERlY29yYXRpb25Db2xvciIsInRpbnRDb2xvciIsInRleHRTaGFkb3dDb2xvciIsIm92ZXJsYXlDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBVUE7Ozs7QUFFQSxJQUFNQSxzQkFBc0JDLFFBQVEscUJBQVIsQ0FBNUI7QUFDQSxJQUFNQyxxQkFBcUJELFFBQVEsb0JBQVIsQ0FBM0I7QUFDQSxJQUFNRSxxQkFBcUJGLFFBQVEsb0JBQVIsQ0FBM0I7O0FBS0EsSUFBTUcsWUFBWUgsUUFBUSxvQkFBUixDQUFsQjtBQUNBLElBQU1JLGVBQWVKLFFBQVEsY0FBUixDQUFyQjtBQUNBLElBQU1LLG1CQUFtQkwsUUFBUSxrQkFBUixDQUF6QjtBQUNBLElBQU1NLGNBQWNOLFFBQVEsYUFBUixDQUFwQjs7QUFFQSxJQUFNTywwQ0FDREosVUFBVUQsa0JBQVYsQ0FEQyxFQUVEQyxVQUFVRixrQkFBVixDQUZDLEVBR0RFLFVBQVVKLG1CQUFWLENBSEMsQ0FBTjs7QUFNQVEsMkJBQTJCQyxTQUEzQixHQUF1QyxFQUFDQyxTQUFTSixnQkFBVixFQUF2QztBQUNBRSwyQkFBMkJHLFlBQTNCLEdBQTBDLEVBQUNDLE1BQU1MLFdBQVAsRUFBMUM7O0FBRUEsSUFBTU0sa0JBQWtCLEVBQUNILFNBQVNMLFlBQVYsRUFBeEI7QUFDQUcsMkJBQTJCTSxlQUEzQixHQUE2Q0QsZUFBN0M7QUFDQUwsMkJBQTJCTyxpQkFBM0IsR0FBK0NGLGVBQS9DO0FBQ0FMLDJCQUEyQlEsV0FBM0IsR0FBeUNILGVBQXpDO0FBQ0FMLDJCQUEyQlMsZUFBM0IsR0FBNkNKLGVBQTdDO0FBQ0FMLDJCQUEyQlUsZ0JBQTNCLEdBQThDTCxlQUE5QztBQUNBTCwyQkFBMkJXLGNBQTNCLEdBQTRDTixlQUE1QztBQUNBTCwyQkFBMkJZLGdCQUEzQixHQUE4Q1AsZUFBOUM7QUFDQUwsMkJBQTJCYSxjQUEzQixHQUE0Q1IsZUFBNUM7QUFDQUwsMkJBQTJCYyxLQUEzQixHQUFtQ1QsZUFBbkM7QUFDQUwsMkJBQTJCZSxXQUEzQixHQUF5Q1YsZUFBekM7QUFDQUwsMkJBQTJCZ0IsbUJBQTNCLEdBQWlEWCxlQUFqRDtBQUNBTCwyQkFBMkJpQixTQUEzQixHQUF1Q1osZUFBdkM7QUFDQUwsMkJBQTJCa0IsZUFBM0IsR0FBNkNiLGVBQTdDO0FBQ0FMLDJCQUEyQm1CLFlBQTNCLEdBQTBDZCxlQUExQzs7QUFFQWUsT0FBT0MsT0FBUCxHQUFpQnJCLDBCQUFqQiIsImZpbGUiOiJSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEltYWdlU3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdJbWFnZVN0eWxlUHJvcFR5cGVzJyk7XG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdUZXh0U3R5bGVQcm9wVHlwZXMnKTtcbmNvbnN0IFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ1ZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG4vKiAkRmxvd0ZpeE1lKD49MC41NC4wIHNpdGU9cmVhY3RfbmF0aXZlX29zcykgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3JcbiAqIGZvdW5kIHdoZW4gRmxvdyB2MC41NCB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IgZGVsZXRlIHRoaXMgY29tbWVudCBhbmRcbiAqIHJ1biBGbG93LiAqL1xuY29uc3Qga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG5jb25zdCBwcm9jZXNzQ29sb3IgPSByZXF1aXJlKCdwcm9jZXNzQ29sb3InKTtcbmNvbnN0IHByb2Nlc3NUcmFuc2Zvcm0gPSByZXF1aXJlKCdwcm9jZXNzVHJhbnNmb3JtJyk7XG5jb25zdCBzaXplc0RpZmZlciA9IHJlcXVpcmUoJ3NpemVzRGlmZmVyJyk7XG5cbmNvbnN0IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzID0ge1xuICAuLi5rZXlNaXJyb3IoVmlld1N0eWxlUHJvcFR5cGVzKSxcbiAgLi4ua2V5TWlycm9yKFRleHRTdHlsZVByb3BUeXBlcyksXG4gIC4uLmtleU1pcnJvcihJbWFnZVN0eWxlUHJvcFR5cGVzKSxcbn07XG5cblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRyYW5zZm9ybSA9IHtwcm9jZXNzOiBwcm9jZXNzVHJhbnNmb3JtfTtcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnNoYWRvd09mZnNldCA9IHtkaWZmOiBzaXplc0RpZmZlcn07XG5cbmNvbnN0IGNvbG9yQXR0cmlidXRlcyA9IHtwcm9jZXNzOiBwcm9jZXNzQ29sb3J9O1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYmFja2dyb3VuZENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyQm90dG9tQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckxlZnRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclJpZ2h0Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJUb3BDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlclN0YXJ0Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJFbmRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuc2hhZG93Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50ZXh0RGVjb3JhdGlvbkNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudGludENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudGV4dFNoYWRvd0NvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMub3ZlcmxheUNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzO1xuIl19