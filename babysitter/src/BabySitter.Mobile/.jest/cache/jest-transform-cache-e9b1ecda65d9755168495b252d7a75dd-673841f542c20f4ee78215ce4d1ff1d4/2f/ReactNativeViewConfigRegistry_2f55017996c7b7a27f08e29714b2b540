238d1ab01061657c298d62687df90abf


'use strict';

var invariant = require('fbjs/lib/invariant');

var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var eventTypes = {};

exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
exports.eventTypes = eventTypes;

var viewConfigCallbacks = new Map();
var viewConfigs = new Map();

function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;


  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }

  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }

  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}

exports.register = function (name, callback) {
  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  viewConfigCallbacks.set(name, callback);
  return name;
};

exports.get = function (name) {
  var viewConfig = void 0;
  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);
    invariant(typeof callback === 'function', 'View config not found for name %s', name);
    viewConfigCallbacks.set(name, null);
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
  } else {
    viewConfig = viewConfigs.get(name);
  }
  invariant(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXZlbnRUeXBlcyIsImV4cG9ydHMiLCJ2aWV3Q29uZmlnQ2FsbGJhY2tzIiwiTWFwIiwidmlld0NvbmZpZ3MiLCJwcm9jZXNzRXZlbnRUeXBlcyIsInZpZXdDb25maWciLCJidWJibGluZ0V2ZW50VHlwZXMiLCJkaXJlY3RFdmVudFR5cGVzIiwiX19ERVZfXyIsInRvcExldmVsVHlwZSIsInJlZ2lzdGVyIiwibmFtZSIsImNhbGxiYWNrIiwiaGFzIiwic2V0IiwiZ2V0Il0sIm1hcHBpbmdzIjoiOztBQVVBOztBQU9BLElBQU1BLFlBQVlDLFFBQVEsb0JBQVIsQ0FBbEI7O0FBR0EsSUFBTUMsMkJBQTJCLEVBQWpDO0FBQ0EsSUFBTUMseUJBQXlCLEVBQS9CO0FBQ0EsSUFBTUMsYUFBYSxFQUFuQjs7QUFFQUMsUUFBUUgsd0JBQVIsR0FBbUNBLHdCQUFuQztBQUNBRyxRQUFRRixzQkFBUixHQUFpQ0Esc0JBQWpDO0FBQ0FFLFFBQVFELFVBQVIsR0FBcUJBLFVBQXJCOztBQUVBLElBQU1FLHNCQUFzQixJQUFJQyxHQUFKLEVBQTVCO0FBQ0EsSUFBTUMsY0FBYyxJQUFJRCxHQUFKLEVBQXBCOztBQUVBLFNBQVNFLGlCQUFULENBQ0VDLFVBREYsRUFFUTtBQUFBLE1BQ0NDLGtCQURELEdBQ3lDRCxVQUR6QyxDQUNDQyxrQkFERDtBQUFBLE1BQ3FCQyxnQkFEckIsR0FDeUNGLFVBRHpDLENBQ3FCRSxnQkFEckI7OztBQUdOLE1BQUlDLE9BQUosRUFBYTtBQUNYLFFBQUlGLHNCQUFzQixJQUF0QixJQUE4QkMsb0JBQW9CLElBQXRELEVBQTREO0FBQzFELFdBQUssSUFBTUUsWUFBWCxJQUEyQkYsZ0JBQTNCLEVBQTZDO0FBQzNDWixrQkFDRVcsbUJBQW1CRyxZQUFuQixLQUFvQyxJQUR0QyxFQUVFLDhDQUZGLEVBR0VBLFlBSEY7QUFLRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSUgsc0JBQXNCLElBQTFCLEVBQWdDO0FBQzlCLFNBQUssSUFBTUcsYUFBWCxJQUEyQkgsa0JBQTNCLEVBQStDO0FBQzdDLFVBQUlULHlCQUF5QlksYUFBekIsS0FBMEMsSUFBOUMsRUFBb0Q7QUFDbERWLG1CQUFXVSxhQUFYLElBQTJCWix5QkFBeUJZLGFBQXpCLElBQ3pCSCxtQkFBbUJHLGFBQW5CLENBREY7QUFFRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSUYsb0JBQW9CLElBQXhCLEVBQThCO0FBQzVCLFNBQUssSUFBTUUsY0FBWCxJQUEyQkYsZ0JBQTNCLEVBQTZDO0FBQzNDLFVBQUlULHVCQUF1QlcsY0FBdkIsS0FBd0MsSUFBNUMsRUFBa0Q7QUFDaERWLG1CQUFXVSxjQUFYLElBQTJCWCx1QkFBdUJXLGNBQXZCLElBQ3pCRixpQkFBaUJFLGNBQWpCLENBREY7QUFFRDtBQUNGO0FBQ0Y7QUFDRjs7QUFRRFQsUUFBUVUsUUFBUixHQUFtQixVQUFTQyxJQUFULEVBQXVCQyxRQUF2QixFQUEyRDtBQUM1RWpCLFlBQ0UsQ0FBQ00sb0JBQW9CWSxHQUFwQixDQUF3QkYsSUFBeEIsQ0FESCxFQUVFLG1EQUZGLEVBR0VBLElBSEY7QUFLQVYsc0JBQW9CYSxHQUFwQixDQUF3QkgsSUFBeEIsRUFBOEJDLFFBQTlCO0FBQ0EsU0FBT0QsSUFBUDtBQUNELENBUkQ7O0FBZUFYLFFBQVFlLEdBQVIsR0FBYyxVQUFTSixJQUFULEVBQTJEO0FBQ3ZFLE1BQUlOLG1CQUFKO0FBQ0EsTUFBSSxDQUFDRixZQUFZVSxHQUFaLENBQWdCRixJQUFoQixDQUFMLEVBQTRCO0FBQzFCLFFBQU1DLFdBQVdYLG9CQUFvQmMsR0FBcEIsQ0FBd0JKLElBQXhCLENBQWpCO0FBQ0FoQixjQUNFLE9BQU9pQixRQUFQLEtBQW9CLFVBRHRCLEVBRUUsbUNBRkYsRUFHRUQsSUFIRjtBQUtBVix3QkFBb0JhLEdBQXBCLENBQXdCSCxJQUF4QixFQUE4QixJQUE5QjtBQUNBTixpQkFBYU8sVUFBYjtBQUNBUixzQkFBa0JDLFVBQWxCO0FBQ0FGLGdCQUFZVyxHQUFaLENBQWdCSCxJQUFoQixFQUFzQk4sVUFBdEI7QUFDRCxHQVhELE1BV087QUFDTEEsaUJBQWFGLFlBQVlZLEdBQVosQ0FBZ0JKLElBQWhCLENBQWI7QUFDRDtBQUNEaEIsWUFBVVUsVUFBVixFQUFzQixtQ0FBdEIsRUFBMkRNLElBQTNEO0FBQ0EsU0FBT04sVUFBUDtBQUNELENBbEJEIiwiZmlsZSI6IlJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1xuICBSZWFjdE5hdGl2ZUJhc2VDb21wb25lbnRWaWV3Q29uZmlnLFxuICBWaWV3Q29uZmlnR2V0dGVyLFxufSBmcm9tICcuL1JlYWN0TmF0aXZlVHlwZXMnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLy8gRXZlbnQgY29uZmlnc1xuY29uc3QgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzID0ge307XG5jb25zdCBjdXN0b21EaXJlY3RFdmVudFR5cGVzID0ge307XG5jb25zdCBldmVudFR5cGVzID0ge307XG5cbmV4cG9ydHMuY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzID0gY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzO1xuZXhwb3J0cy5jdXN0b21EaXJlY3RFdmVudFR5cGVzID0gY3VzdG9tRGlyZWN0RXZlbnRUeXBlcztcbmV4cG9ydHMuZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXM7XG5cbmNvbnN0IHZpZXdDb25maWdDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG5jb25zdCB2aWV3Q29uZmlncyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50VHlwZXMoXG4gIHZpZXdDb25maWc6IFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWcsXG4pOiB2b2lkIHtcbiAgY29uc3Qge2J1YmJsaW5nRXZlbnRUeXBlcywgZGlyZWN0RXZlbnRUeXBlc30gPSB2aWV3Q29uZmlnO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKGJ1YmJsaW5nRXZlbnRUeXBlcyAhPSBudWxsICYmIGRpcmVjdEV2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgYnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPT0gbnVsbCxcbiAgICAgICAgICAnRXZlbnQgY2Fubm90IGJlIGJvdGggZGlyZWN0IGFuZCBidWJibGluZzogJXMnLFxuICAgICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBidWJibGluZ0V2ZW50VHlwZXMpIHtcbiAgICAgIGlmIChjdXN0b21CdWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgIGV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID1cbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgIGV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9XG4gICAgICAgICAgZGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIG5hdGl2ZSB2aWV3L2NvbXBvbmVudCBieSBuYW1lLlxuICogQSBjYWxsYmFjayBpcyBwcm92aWRlZCB0byBsb2FkIHRoZSB2aWV3IGNvbmZpZyBmcm9tIFVJTWFuYWdlci5cbiAqIFRoZSBjYWxsYmFjayBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgdmlldyBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqIFRoaXMgaXMgZG9uZSB0byBhdm9pZCBjYXVzaW5nIFByZXBhY2sgZGVvcHRzLlxuICovXG5leHBvcnRzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZTogc3RyaW5nLCBjYWxsYmFjazogVmlld0NvbmZpZ0dldHRlcik6IHN0cmluZyB7XG4gIGludmFyaWFudChcbiAgICAhdmlld0NvbmZpZ0NhbGxiYWNrcy5oYXMobmFtZSksXG4gICAgJ1RyaWVkIHRvIHJlZ2lzdGVyIHR3byB2aWV3cyB3aXRoIHRoZSBzYW1lIG5hbWUgJXMnLFxuICAgIG5hbWUsXG4gICk7XG4gIHZpZXdDb25maWdDYWxsYmFja3Muc2V0KG5hbWUsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIG5hbWU7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhIGNvbmZpZyBmb3IgdGhlIHNwZWNpZmllZCB2aWV3LlxuICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgdmlldyBoYXMgYmVlbiB1c2VkLFxuICogVGhpcyBjb25maWd1cmF0aW9uIHdpbGwgYmUgbGF6eS1sb2FkZWQgZnJvbSBVSU1hbmFnZXIuXG4gKi9cbmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24obmFtZTogc3RyaW5nKTogUmVhY3ROYXRpdmVCYXNlQ29tcG9uZW50Vmlld0NvbmZpZyB7XG4gIGxldCB2aWV3Q29uZmlnO1xuICBpZiAoIXZpZXdDb25maWdzLmhhcyhuYW1lKSkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdmlld0NvbmZpZ0NhbGxiYWNrcy5nZXQobmFtZSk7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ1ZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlcycsXG4gICAgICBuYW1lLFxuICAgICk7XG4gICAgdmlld0NvbmZpZ0NhbGxiYWNrcy5zZXQobmFtZSwgbnVsbCk7XG4gICAgdmlld0NvbmZpZyA9IGNhbGxiYWNrKCk7XG4gICAgcHJvY2Vzc0V2ZW50VHlwZXModmlld0NvbmZpZyk7XG4gICAgdmlld0NvbmZpZ3Muc2V0KG5hbWUsIHZpZXdDb25maWcpO1xuICB9IGVsc2Uge1xuICAgIHZpZXdDb25maWcgPSB2aWV3Q29uZmlncy5nZXQobmFtZSk7XG4gIH1cbiAgaW52YXJpYW50KHZpZXdDb25maWcsICdWaWV3IGNvbmZpZyBub3QgZm91bmQgZm9yIG5hbWUgJXMnLCBuYW1lKTtcbiAgcmV0dXJuIHZpZXdDb25maWc7XG59O1xuIl19