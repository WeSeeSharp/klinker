a0e714a426b04263ffd167e8d9e2e034


'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require('ColorPropType');
var ReactPropTypes = require('prop-types');
var ViewStylePropTypes = require('ViewStylePropTypes');

var TextStylePropTypes = _extends({}, ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),

  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),

  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,

  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,

  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),

  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),

  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),

  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),

  textDecorationColor: ColorPropType,

  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),

  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0UHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiY29sb3IiLCJmb250RmFtaWx5Iiwic3RyaW5nIiwiZm9udFNpemUiLCJudW1iZXIiLCJmb250U3R5bGUiLCJvbmVPZiIsImZvbnRXZWlnaHQiLCJmb250VmFyaWFudCIsImFycmF5T2YiLCJ0ZXh0U2hhZG93T2Zmc2V0Iiwic2hhcGUiLCJ3aWR0aCIsImhlaWdodCIsInRleHRTaGFkb3dSYWRpdXMiLCJ0ZXh0U2hhZG93Q29sb3IiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInRleHRBbGlnblZlcnRpY2FsIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwiYm9vbCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwidGV4dFRyYW5zZm9ybSIsIndyaXRpbmdEaXJlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQVVBOzs7O0FBRUEsSUFBTUEsZ0JBQWdCQyxRQUFRLGVBQVIsQ0FBdEI7QUFDQSxJQUFNQyxpQkFBaUJELFFBQVEsWUFBUixDQUF2QjtBQUNBLElBQU1FLHFCQUFxQkYsUUFBUSxvQkFBUixDQUEzQjs7QUFFQSxJQUFNRyxrQ0FDREQsa0JBREM7O0FBR0pFLFNBQU9MLGFBSEg7QUFJSk0sY0FBWUosZUFBZUssTUFKdkI7QUFLSkMsWUFBVU4sZUFBZU8sTUFMckI7QUFNSkMsYUFBV1IsZUFBZVMsS0FBZixDQUFxQixDQUFDLFFBQUQsRUFBVyxRQUFYLENBQXJCLENBTlA7O0FBWUpDLGNBQVlWLGVBQWVTLEtBQWYsQ0FBcUIsQ0FDL0IsUUFEK0IsRUFFL0IsTUFGK0IsRUFHL0IsS0FIK0IsRUFJL0IsS0FKK0IsRUFLL0IsS0FMK0IsRUFNL0IsS0FOK0IsRUFPL0IsS0FQK0IsRUFRL0IsS0FSK0IsRUFTL0IsS0FUK0IsRUFVL0IsS0FWK0IsRUFXL0IsS0FYK0IsQ0FBckIsQ0FaUjs7QUE0QkpFLGVBQWFYLGVBQWVZLE9BQWYsQ0FDWFosZUFBZVMsS0FBZixDQUFxQixDQUNuQixZQURtQixFQUVuQixlQUZtQixFQUduQixhQUhtQixFQUluQixjQUptQixFQUtuQixtQkFMbUIsQ0FBckIsQ0FEVyxDQTVCVDtBQXFDSkksb0JBQWtCYixlQUFlYyxLQUFmLENBQXFCO0FBQ3JDQyxXQUFPZixlQUFlTyxNQURlO0FBRXJDUyxZQUFRaEIsZUFBZU87QUFGYyxHQUFyQixDQXJDZDtBQXlDSlUsb0JBQWtCakIsZUFBZU8sTUF6QzdCO0FBMENKVyxtQkFBaUJwQixhQTFDYjs7QUE4Q0pxQixpQkFBZW5CLGVBQWVPLE1BOUMxQjtBQStDSmEsY0FBWXBCLGVBQWVPLE1BL0N2Qjs7QUFvREpjLGFBQVdyQixlQUFlUyxLQUFmLENBQXFCLENBQzlCLE1BRDhCLEVBRTlCLE1BRjhCLEVBRzlCLE9BSDhCLEVBSTlCLFFBSjhCLEVBSzlCLFNBTDhCLENBQXJCLENBcERQOztBQThESmEscUJBQW1CdEIsZUFBZVMsS0FBZixDQUFxQixDQUN0QyxNQURzQyxFQUV0QyxLQUZzQyxFQUd0QyxRQUhzQyxFQUl0QyxRQUpzQyxDQUFyQixDQTlEZjs7QUEwRUpjLHNCQUFvQnZCLGVBQWV3QixJQTFFL0I7QUEyRUpDLHNCQUFvQnpCLGVBQWVTLEtBQWYsQ0FBcUIsQ0FDdkMsTUFEdUMsRUFFdkMsV0FGdUMsRUFHdkMsY0FIdUMsRUFJdkMsd0JBSnVDLENBQXJCLENBM0VoQjs7QUFvRkppQix1QkFBcUIxQixlQUFlUyxLQUFmLENBQXFCLENBQ3hDLE9BRHdDLEVBRXhDLFFBRndDLEVBR3hDLFFBSHdDLEVBSXhDLFFBSndDLENBQXJCLENBcEZqQjs7QUE2RkprQix1QkFBcUI3QixhQTdGakI7O0FBaUdKOEIsaUJBQWU1QixlQUFlUyxLQUFmLENBQXFCLENBQ2xDLE1BRGtDLEVBRWxDLFlBRmtDLEVBR2xDLFdBSGtDLEVBSWxDLFdBSmtDLENBQXJCLENBakdYOztBQTBHSm9CLG9CQUFrQjdCLGVBQWVTLEtBQWYsQ0FBcUIsQ0FBQyxNQUFELEVBQXFCLEtBQXJCLEVBQTRCLEtBQTVCLENBQXJCO0FBMUdkLEVBQU47O0FBNkdBcUIsT0FBT0MsT0FBUCxHQUFpQjdCLGtCQUFqQiIsImZpbGUiOiJUZXh0U3R5bGVQcm9wVHlwZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb2xvclByb3BUeXBlID0gcmVxdWlyZSgnQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdWaWV3U3R5bGVQcm9wVHlwZXMnKTtcblxuY29uc3QgVGV4dFN0eWxlUHJvcFR5cGVzID0ge1xuICAuLi5WaWV3U3R5bGVQcm9wVHlwZXMsXG5cbiAgY29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGZvbnRGYW1pbHk6IFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgZm9udFNpemU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgZm9udFN0eWxlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdpdGFsaWMnXSksXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgZm9udCB3ZWlnaHQuIFRoZSB2YWx1ZXMgJ25vcm1hbCcgYW5kICdib2xkJyBhcmUgc3VwcG9ydGVkIGZvclxuICAgKiBtb3N0IGZvbnRzLiBOb3QgYWxsIGZvbnRzIGhhdmUgYSB2YXJpYW50IGZvciBlYWNoIG9mIHRoZSBudW1lcmljIHZhbHVlcyxcbiAgICogaW4gdGhhdCBjYXNlIHRoZSBjbG9zZXN0IG9uZSBpcyBjaG9zZW4uXG4gICAqL1xuICBmb250V2VpZ2h0OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vcm1hbCcgLypkZWZhdWx0Ki8sXG4gICAgJ2JvbGQnLFxuICAgICcxMDAnLFxuICAgICcyMDAnLFxuICAgICczMDAnLFxuICAgICc0MDAnLFxuICAgICc1MDAnLFxuICAgICc2MDAnLFxuICAgICc3MDAnLFxuICAgICc4MDAnLFxuICAgICc5MDAnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGZvbnRWYXJpYW50OiBSZWFjdFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdzbWFsbC1jYXBzJyxcbiAgICAgICdvbGRzdHlsZS1udW1zJyxcbiAgICAgICdsaW5pbmctbnVtcycsXG4gICAgICAndGFidWxhci1udW1zJyxcbiAgICAgICdwcm9wb3J0aW9uYWwtbnVtcycsXG4gICAgXSksXG4gICksXG4gIHRleHRTaGFkb3dPZmZzZXQ6IFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtcbiAgICB3aWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICB9KSxcbiAgdGV4dFNoYWRvd1JhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICB0ZXh0U2hhZG93Q29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBsZXR0ZXJTcGFjaW5nOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGxpbmVIZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0ZXh0IGFsaWdubWVudC4gVGhlIHZhbHVlICdqdXN0aWZ5JyBpcyBvbmx5IHN1cHBvcnRlZCBvbiBpT1MgYW5kXG4gICAqIGZhbGxiYWNrcyB0byBgbGVmdGAgb24gQW5kcm9pZC5cbiAgICovXG4gIHRleHRBbGlnbjogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdhdXRvJyAvKmRlZmF1bHQqLyxcbiAgICAnbGVmdCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnY2VudGVyJyxcbiAgICAnanVzdGlmeScsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHRleHRBbGlnblZlcnRpY2FsOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nIC8qZGVmYXVsdCovLFxuICAgICd0b3AnLFxuICAgICdib3R0b20nLFxuICAgICdjZW50ZXInLFxuICBdKSxcbiAgLyoqXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIHJlbW92ZSBleHRyYSBmb250IHBhZGRpbmcgaW50ZW5kZWQgdG8gbWFrZSBzcGFjZSBmb3IgY2VydGFpbiBhc2NlbmRlcnMgLyBkZXNjZW5kZXJzLlxuICAgKiBXaXRoIHNvbWUgZm9udHMsIHRoaXMgcGFkZGluZyBjYW4gbWFrZSB0ZXh0IGxvb2sgc2xpZ2h0bHkgbWlzYWxpZ25lZCB3aGVuIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAqIEZvciBiZXN0IHJlc3VsdHMgYWxzbyBzZXQgYHRleHRBbGlnblZlcnRpY2FsYCB0byBgY2VudGVyYC4gRGVmYXVsdCBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgaW5jbHVkZUZvbnRQYWRkaW5nOiBSZWFjdFByb3BUeXBlcy5ib29sLFxuICB0ZXh0RGVjb3JhdGlvbkxpbmU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScgLypkZWZhdWx0Ki8sXG4gICAgJ3VuZGVybGluZScsXG4gICAgJ2xpbmUtdGhyb3VnaCcsXG4gICAgJ3VuZGVybGluZSBsaW5lLXRocm91Z2gnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHRleHREZWNvcmF0aW9uU3R5bGU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnc29saWQnIC8qZGVmYXVsdCovLFxuICAgICdkb3VibGUnLFxuICAgICdkb3R0ZWQnLFxuICAgICdkYXNoZWQnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHRleHREZWNvcmF0aW9uQ29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB0ZXh0VHJhbnNmb3JtOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vbmUnIC8qZGVmYXVsdCovLFxuICAgICdjYXBpdGFsaXplJyxcbiAgICAndXBwZXJjYXNlJyxcbiAgICAnbG93ZXJjYXNlJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB3cml0aW5nRGlyZWN0aW9uOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nIC8qZGVmYXVsdCovLCAnbHRyJywgJ3J0bCddKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dFN0eWxlUHJvcFR5cGVzO1xuIl19