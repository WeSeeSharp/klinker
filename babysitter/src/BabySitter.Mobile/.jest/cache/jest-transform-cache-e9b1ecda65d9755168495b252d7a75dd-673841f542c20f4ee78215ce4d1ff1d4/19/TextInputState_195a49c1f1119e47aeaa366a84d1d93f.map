{"version":3,"sources":["TextInputState.js"],"names":["Platform","require","UIManager","inputs","Set","TextInputState","_currentlyFocusedID","currentlyFocusedField","focusTextInput","textFieldID","OS","focus","dispatchViewManagerCommand","AndroidTextInput","Commands","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","module","exports"],"mappings":";;AAeA;;AAEA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;;AAEA,IAAME,SAAS,IAAIC,GAAJ,EAAf;;AAEA,IAAMC,iBAAiB;AAIrBC,uBAAsB,IAJD;;AAUrBC,yBAAuB,iCAAoB;AACzC,WAAO,KAAKD,mBAAZ;AACD,GAZoB;;AAmBrBE,kBAAgB,wBAASC,WAAT,EAA+B;AAC7C,QAAI,KAAKH,mBAAL,KAA6BG,WAA7B,IAA4CA,gBAAgB,IAAhE,EAAsE;AACpE,WAAKH,mBAAL,GAA2BG,WAA3B;AACA,UAAIT,SAASU,EAAT,KAAgB,KAApB,EAA2B;AACzBR,kBAAUS,KAAV,CAAgBF,WAAhB;AACD,OAFD,MAEO,IAAIT,SAASU,EAAT,KAAgB,SAApB,EAA+B;AACpCR,kBAAUU,0BAAV,CACEH,WADF,EAEEP,UAAUW,gBAAV,CAA2BC,QAA3B,CAAoCN,cAFtC,EAGE,IAHF;AAKD;AACF;AACF,GAhCoB;;AAuCrBO,iBAAe,uBAASN,WAAT,EAA+B;AAC5C,QAAI,KAAKH,mBAAL,KAA6BG,WAA7B,IAA4CA,gBAAgB,IAAhE,EAAsE;AACpE,WAAKH,mBAAL,GAA2B,IAA3B;AACA,UAAIN,SAASU,EAAT,KAAgB,KAApB,EAA2B;AACzBR,kBAAUc,IAAV,CAAeP,WAAf;AACD,OAFD,MAEO,IAAIT,SAASU,EAAT,KAAgB,SAApB,EAA+B;AACpCR,kBAAUU,0BAAV,CACEH,WADF,EAEEP,UAAUW,gBAAV,CAA2BC,QAA3B,CAAoCC,aAFtC,EAGE,IAHF;AAKD;AACF;AACF,GApDoB;;AAsDrBE,iBAAe,uBAASR,WAAT,EAA8B;AAC3CN,WAAOe,GAAP,CAAWT,WAAX;AACD,GAxDoB;;AA0DrBU,mBAAiB,yBAASV,WAAT,EAA8B;AAC7CN,WAAOiB,MAAP,CAAcX,WAAd;AACD,GA5DoB;;AA8DrBY,eAAa,qBAASZ,WAAT,EAA8B;AACzC,WAAON,OAAOmB,GAAP,CAAWb,WAAX,CAAP;AACD;AAhEoB,CAAvB;;AAmEAc,OAAOC,OAAP,GAAiBnB,cAAjB","file":"TextInputState.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst UIManager = require('UIManager');\n\nconst inputs = new Set();\n\nconst TextInputState = {\n  /**\n   * Internal state\n   */\n  _currentlyFocusedID: (null: ?number),\n\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField: function(): ?number {\n    return this._currentlyFocusedID;\n  },\n\n  /**\n   * @param {number} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput: function(textFieldID: ?number) {\n    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {\n      this._currentlyFocusedID = textFieldID;\n      if (Platform.OS === 'ios') {\n        UIManager.focus(textFieldID);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(\n          textFieldID,\n          UIManager.AndroidTextInput.Commands.focusTextInput,\n          null,\n        );\n      }\n    }\n  },\n\n  /**\n   * @param {number} textFieldID id of the text field to unfocus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput: function(textFieldID: ?number) {\n    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {\n      this._currentlyFocusedID = null;\n      if (Platform.OS === 'ios') {\n        UIManager.blur(textFieldID);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(\n          textFieldID,\n          UIManager.AndroidTextInput.Commands.blurTextInput,\n          null,\n        );\n      }\n    }\n  },\n\n  registerInput: function(textFieldID: number) {\n    inputs.add(textFieldID);\n  },\n\n  unregisterInput: function(textFieldID: number) {\n    inputs.delete(textFieldID);\n  },\n\n  isTextInput: function(textFieldID: number) {\n    return inputs.has(textFieldID);\n  },\n};\n\nmodule.exports = TextInputState;\n"]}