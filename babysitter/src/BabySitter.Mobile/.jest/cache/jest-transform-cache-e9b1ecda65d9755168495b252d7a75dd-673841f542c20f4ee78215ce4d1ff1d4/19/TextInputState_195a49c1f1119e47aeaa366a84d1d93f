de10cdf2f4c1a435d6f963e0d6ae176c


'use strict';

var Platform = require('Platform');
var UIManager = require('UIManager');

var inputs = new Set();

var TextInputState = {
  _currentlyFocusedID: null,

  currentlyFocusedField: function currentlyFocusedField() {
    return this._currentlyFocusedID;
  },

  focusTextInput: function focusTextInput(textFieldID) {
    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = textFieldID;
      if (Platform.OS === 'ios') {
        UIManager.focus(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
      }
    }
  },

  blurTextInput: function blurTextInput(textFieldID) {
    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = null;
      if (Platform.OS === 'ios') {
        UIManager.blur(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
      }
    }
  },

  registerInput: function registerInput(textFieldID) {
    inputs.add(textFieldID);
  },

  unregisterInput: function unregisterInput(textFieldID) {
    inputs.delete(textFieldID);
  },

  isTextInput: function isTextInput(textFieldID) {
    return inputs.has(textFieldID);
  }
};

module.exports = TextInputState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImlucHV0cyIsIlNldCIsIlRleHRJbnB1dFN0YXRlIiwiX2N1cnJlbnRseUZvY3VzZWRJRCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJBbmRyb2lkVGV4dElucHV0IiwiQ29tbWFuZHMiLCJibHVyVGV4dElucHV0IiwiYmx1ciIsInJlZ2lzdGVySW5wdXQiLCJhZGQiLCJ1bnJlZ2lzdGVySW5wdXQiLCJkZWxldGUiLCJpc1RleHRJbnB1dCIsImhhcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBZUE7O0FBRUEsSUFBTUEsV0FBV0MsUUFBUSxVQUFSLENBQWpCO0FBQ0EsSUFBTUMsWUFBWUQsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQU1FLFNBQVMsSUFBSUMsR0FBSixFQUFmOztBQUVBLElBQU1DLGlCQUFpQjtBQUlyQkMsdUJBQXNCLElBSkQ7O0FBVXJCQyx5QkFBdUIsaUNBQW9CO0FBQ3pDLFdBQU8sS0FBS0QsbUJBQVo7QUFDRCxHQVpvQjs7QUFtQnJCRSxrQkFBZ0Isd0JBQVNDLFdBQVQsRUFBK0I7QUFDN0MsUUFBSSxLQUFLSCxtQkFBTCxLQUE2QkcsV0FBN0IsSUFBNENBLGdCQUFnQixJQUFoRSxFQUFzRTtBQUNwRSxXQUFLSCxtQkFBTCxHQUEyQkcsV0FBM0I7QUFDQSxVQUFJVCxTQUFTVSxFQUFULEtBQWdCLEtBQXBCLEVBQTJCO0FBQ3pCUixrQkFBVVMsS0FBVixDQUFnQkYsV0FBaEI7QUFDRCxPQUZELE1BRU8sSUFBSVQsU0FBU1UsRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUNwQ1Isa0JBQVVVLDBCQUFWLENBQ0VILFdBREYsRUFFRVAsVUFBVVcsZ0JBQVYsQ0FBMkJDLFFBQTNCLENBQW9DTixjQUZ0QyxFQUdFLElBSEY7QUFLRDtBQUNGO0FBQ0YsR0FoQ29COztBQXVDckJPLGlCQUFlLHVCQUFTTixXQUFULEVBQStCO0FBQzVDLFFBQUksS0FBS0gsbUJBQUwsS0FBNkJHLFdBQTdCLElBQTRDQSxnQkFBZ0IsSUFBaEUsRUFBc0U7QUFDcEUsV0FBS0gsbUJBQUwsR0FBMkIsSUFBM0I7QUFDQSxVQUFJTixTQUFTVSxFQUFULEtBQWdCLEtBQXBCLEVBQTJCO0FBQ3pCUixrQkFBVWMsSUFBVixDQUFlUCxXQUFmO0FBQ0QsT0FGRCxNQUVPLElBQUlULFNBQVNVLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDcENSLGtCQUFVVSwwQkFBVixDQUNFSCxXQURGLEVBRUVQLFVBQVVXLGdCQUFWLENBQTJCQyxRQUEzQixDQUFvQ0MsYUFGdEMsRUFHRSxJQUhGO0FBS0Q7QUFDRjtBQUNGLEdBcERvQjs7QUFzRHJCRSxpQkFBZSx1QkFBU1IsV0FBVCxFQUE4QjtBQUMzQ04sV0FBT2UsR0FBUCxDQUFXVCxXQUFYO0FBQ0QsR0F4RG9COztBQTBEckJVLG1CQUFpQix5QkFBU1YsV0FBVCxFQUE4QjtBQUM3Q04sV0FBT2lCLE1BQVAsQ0FBY1gsV0FBZDtBQUNELEdBNURvQjs7QUE4RHJCWSxlQUFhLHFCQUFTWixXQUFULEVBQThCO0FBQ3pDLFdBQU9OLE9BQU9tQixHQUFQLENBQVdiLFdBQVgsQ0FBUDtBQUNEO0FBaEVvQixDQUF2Qjs7QUFtRUFjLE9BQU9DLE9BQVAsR0FBaUJuQixjQUFqQiIsImZpbGUiOiJUZXh0SW5wdXRTdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGNvb3JkaW5hdGluZyB0aGUgXCJmb2N1c2VkXCJcbiAqIHN0YXRlIGZvciBUZXh0SW5wdXRzLiBBbGwgY2FsbHMgcmVsYXRpbmcgdG8gdGhlIGtleWJvYXJkXG4gKiBzaG91bGQgYmUgZnVubmVsZWQgdGhyb3VnaCBoZXJlXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnUGxhdGZvcm0nKTtcbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJ1VJTWFuYWdlcicpO1xuXG5jb25zdCBpbnB1dHMgPSBuZXcgU2V0KCk7XG5cbmNvbnN0IFRleHRJbnB1dFN0YXRlID0ge1xuICAvKipcbiAgICogSW50ZXJuYWwgc3RhdGVcbiAgICovXG4gIF9jdXJyZW50bHlGb2N1c2VkSUQ6IChudWxsOiA/bnVtYmVyKSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHRleHQgZmllbGQsIGlmIG9uZSBleGlzdHNcbiAgICogSWYgbm8gdGV4dCBmaWVsZCBpcyBmb2N1c2VkIGl0IHJldHVybnMgbnVsbFxuICAgKi9cbiAgY3VycmVudGx5Rm9jdXNlZEZpZWxkOiBmdW5jdGlvbigpOiA/bnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudGx5Rm9jdXNlZElEO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gVGV4dElucHV0SUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gZm9jdXNcbiAgICogRm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAgICogbm9vcCBpZiB0aGUgdGV4dCBmaWVsZCB3YXMgYWxyZWFkeSBmb2N1c2VkXG4gICAqL1xuICBmb2N1c1RleHRJbnB1dDogZnVuY3Rpb24odGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgICBpZiAodGhpcy5fY3VycmVudGx5Rm9jdXNlZElEICE9PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fY3VycmVudGx5Rm9jdXNlZElEID0gdGV4dEZpZWxkSUQ7XG4gICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICAgIFVJTWFuYWdlci5mb2N1cyh0ZXh0RmllbGRJRCk7XG4gICAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICAgIHRleHRGaWVsZElELFxuICAgICAgICAgIFVJTWFuYWdlci5BbmRyb2lkVGV4dElucHV0LkNvbW1hbmRzLmZvY3VzVGV4dElucHV0LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGV4dEZpZWxkSUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gdW5mb2N1c1xuICAgKiBVbmZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gICAqIG5vb3AgaWYgaXQgd2Fzbid0IGZvY3VzZWRcbiAgICovXG4gIGJsdXJUZXh0SW5wdXQ6IGZ1bmN0aW9uKHRleHRGaWVsZElEOiA/bnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRseUZvY3VzZWRJRCA9PT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRseUZvY3VzZWRJRCA9IG51bGw7XG4gICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICAgIFVJTWFuYWdlci5ibHVyKHRleHRGaWVsZElEKTtcbiAgICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICAgICAgdGV4dEZpZWxkSUQsXG4gICAgICAgICAgVUlNYW5hZ2VyLkFuZHJvaWRUZXh0SW5wdXQuQ29tbWFuZHMuYmx1clRleHRJbnB1dCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICByZWdpc3RlcklucHV0OiBmdW5jdGlvbih0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gICAgaW5wdXRzLmFkZCh0ZXh0RmllbGRJRCk7XG4gIH0sXG5cbiAgdW5yZWdpc3RlcklucHV0OiBmdW5jdGlvbih0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gICAgaW5wdXRzLmRlbGV0ZSh0ZXh0RmllbGRJRCk7XG4gIH0sXG5cbiAgaXNUZXh0SW5wdXQ6IGZ1bmN0aW9uKHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgICByZXR1cm4gaW5wdXRzLmhhcyh0ZXh0RmllbGRJRCk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRJbnB1dFN0YXRlO1xuIl19