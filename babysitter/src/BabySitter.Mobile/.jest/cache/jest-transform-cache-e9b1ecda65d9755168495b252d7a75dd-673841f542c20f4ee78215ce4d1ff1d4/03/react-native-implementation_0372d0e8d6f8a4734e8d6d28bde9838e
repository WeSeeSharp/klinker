039ec6b88dfd6cb388b74d0bcd2792ce
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * @flow
 */
'use strict';

const invariant = require('fbjs/lib/invariant'); // Export React, plus some native additions.


const ReactNative = {
  // Components
  get AccessibilityInfo() {
    return require('AccessibilityInfo');
  },

  get ActivityIndicator() {
    return require('ActivityIndicator');
  },

  get ART() {
    return require('ReactNativeART');
  },

  get Button() {
    return require('Button');
  },

  get CheckBox() {
    return require('CheckBox');
  },

  get DatePickerIOS() {
    return require('DatePickerIOS');
  },

  get DrawerLayoutAndroid() {
    return require('DrawerLayoutAndroid');
  },

  get FlatList() {
    return require('FlatList');
  },

  get Image() {
    return require('Image');
  },

  get ImageBackground() {
    return require('ImageBackground');
  },

  get ImageEditor() {
    return require('ImageEditor');
  },

  get ImageStore() {
    return require('ImageStore');
  },

  get InputAccessoryView() {
    return require('InputAccessoryView');
  },

  get KeyboardAvoidingView() {
    return require('KeyboardAvoidingView');
  },

  get ListView() {
    return require('ListView');
  },

  get MaskedViewIOS() {
    return require('MaskedViewIOS');
  },

  get Modal() {
    return require('Modal');
  },

  get NavigatorIOS() {
    return require('NavigatorIOS');
  },

  get Picker() {
    return require('Picker');
  },

  get PickerIOS() {
    return require('PickerIOS');
  },

  get ProgressBarAndroid() {
    return require('ProgressBarAndroid');
  },

  get ProgressViewIOS() {
    return require('ProgressViewIOS');
  },

  get SafeAreaView() {
    return require('SafeAreaView');
  },

  get ScrollView() {
    return require('ScrollView');
  },

  get SectionList() {
    return require('SectionList');
  },

  get SegmentedControlIOS() {
    return require('SegmentedControlIOS');
  },

  get Slider() {
    return require('Slider');
  },

  get SnapshotViewIOS() {
    return require('SnapshotViewIOS');
  },

  get Switch() {
    return require('Switch');
  },

  get RefreshControl() {
    return require('RefreshControl');
  },

  get StatusBar() {
    return require('StatusBar');
  },

  get SwipeableFlatList() {
    return require('SwipeableFlatList');
  },

  get SwipeableListView() {
    return require('SwipeableListView');
  },

  get TabBarIOS() {
    return require('TabBarIOS');
  },

  get Text() {
    return require('Text');
  },

  get TextInput() {
    return require('TextInput');
  },

  get ToastAndroid() {
    return require('ToastAndroid');
  },

  get ToolbarAndroid() {
    return require('ToolbarAndroid');
  },

  get Touchable() {
    return require('Touchable');
  },

  get TouchableHighlight() {
    return require('TouchableHighlight');
  },

  get TouchableNativeFeedback() {
    return require('TouchableNativeFeedback');
  },

  get TouchableOpacity() {
    return require('TouchableOpacity');
  },

  get TouchableWithoutFeedback() {
    return require('TouchableWithoutFeedback');
  },

  get View() {
    return require('View');
  },

  get ViewPagerAndroid() {
    return require('ViewPagerAndroid');
  },

  get VirtualizedList() {
    return require('VirtualizedList');
  },

  get WebView() {
    return require('WebView');
  },

  // APIs
  get ActionSheetIOS() {
    return require('ActionSheetIOS');
  },

  get Alert() {
    return require('Alert');
  },

  get AlertIOS() {
    return require('AlertIOS');
  },

  get Animated() {
    return require('Animated');
  },

  get AppRegistry() {
    return require('AppRegistry');
  },

  get AppState() {
    return require('AppState');
  },

  get AsyncStorage() {
    return require('AsyncStorage');
  },

  get BackAndroid() {
    return require('BackAndroid');
  },

  // deprecated: use BackHandler instead
  get BackHandler() {
    return require('BackHandler');
  },

  get CameraRoll() {
    return require('CameraRoll');
  },

  get Clipboard() {
    return require('Clipboard');
  },

  get DatePickerAndroid() {
    return require('DatePickerAndroid');
  },

  get DeviceInfo() {
    return require('DeviceInfo');
  },

  get Dimensions() {
    return require('Dimensions');
  },

  get Easing() {
    return require('Easing');
  },

  get findNodeHandle() {
    return require('ReactNative').findNodeHandle;
  },

  get I18nManager() {
    return require('I18nManager');
  },

  get ImagePickerIOS() {
    return require('ImagePickerIOS');
  },

  get InteractionManager() {
    return require('InteractionManager');
  },

  get Keyboard() {
    return require('Keyboard');
  },

  get LayoutAnimation() {
    return require('LayoutAnimation');
  },

  get Linking() {
    return require('Linking');
  },

  get NativeEventEmitter() {
    return require('NativeEventEmitter');
  },

  get NetInfo() {
    return require('NetInfo');
  },

  get PanResponder() {
    return require('PanResponder');
  },

  get PermissionsAndroid() {
    return require('PermissionsAndroid');
  },

  get PixelRatio() {
    return require('PixelRatio');
  },

  get PushNotificationIOS() {
    return require('PushNotificationIOS');
  },

  get Settings() {
    return require('Settings');
  },

  get Share() {
    return require('Share');
  },

  get StatusBarIOS() {
    return require('StatusBarIOS');
  },

  get StyleSheet() {
    return require('StyleSheet');
  },

  get Systrace() {
    return require('Systrace');
  },

  get TimePickerAndroid() {
    return require('TimePickerAndroid');
  },

  get TVEventHandler() {
    return require('TVEventHandler');
  },

  get UIManager() {
    return require('UIManager');
  },

  get unstable_batchedUpdates() {
    return require('ReactNative').unstable_batchedUpdates;
  },

  get Vibration() {
    return require('Vibration');
  },

  get VibrationIOS() {
    return require('VibrationIOS');
  },

  get YellowBox() {
    return require('YellowBox');
  },

  // Plugins
  get DeviceEventEmitter() {
    return require('RCTDeviceEventEmitter');
  },

  get NativeAppEventEmitter() {
    return require('RCTNativeAppEventEmitter');
  },

  get NativeModules() {
    return require('NativeModules');
  },

  get Platform() {
    return require('Platform');
  },

  get processColor() {
    return require('processColor');
  },

  get requireNativeComponent() {
    return require('requireNativeComponent');
  },

  get takeSnapshot() {
    return require('takeSnapshot');
  },

  // Prop Types
  get ColorPropType() {
    return require('ColorPropType');
  },

  get EdgeInsetsPropType() {
    return require('EdgeInsetsPropType');
  },

  get PointPropType() {
    return require('PointPropType');
  },

  get ViewPropTypes() {
    return require('ViewPropTypes');
  },

  // Deprecated
  get Navigator() {
    invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
  }

};
module.exports = ReactNative;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LW5hdGl2ZS1pbXBsZW1lbnRhdGlvbi5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiUmVhY3ROYXRpdmUiLCJBY2Nlc3NpYmlsaXR5SW5mbyIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiQVJUIiwiQnV0dG9uIiwiQ2hlY2tCb3giLCJEYXRlUGlja2VySU9TIiwiRHJhd2VyTGF5b3V0QW5kcm9pZCIsIkZsYXRMaXN0IiwiSW1hZ2UiLCJJbWFnZUJhY2tncm91bmQiLCJJbWFnZUVkaXRvciIsIkltYWdlU3RvcmUiLCJJbnB1dEFjY2Vzc29yeVZpZXciLCJLZXlib2FyZEF2b2lkaW5nVmlldyIsIkxpc3RWaWV3IiwiTWFza2VkVmlld0lPUyIsIk1vZGFsIiwiTmF2aWdhdG9ySU9TIiwiUGlja2VyIiwiUGlja2VySU9TIiwiUHJvZ3Jlc3NCYXJBbmRyb2lkIiwiUHJvZ3Jlc3NWaWV3SU9TIiwiU2FmZUFyZWFWaWV3IiwiU2Nyb2xsVmlldyIsIlNlY3Rpb25MaXN0IiwiU2VnbWVudGVkQ29udHJvbElPUyIsIlNsaWRlciIsIlNuYXBzaG90Vmlld0lPUyIsIlN3aXRjaCIsIlJlZnJlc2hDb250cm9sIiwiU3RhdHVzQmFyIiwiU3dpcGVhYmxlRmxhdExpc3QiLCJTd2lwZWFibGVMaXN0VmlldyIsIlRhYkJhcklPUyIsIlRleHQiLCJUZXh0SW5wdXQiLCJUb2FzdEFuZHJvaWQiLCJUb29sYmFyQW5kcm9pZCIsIlRvdWNoYWJsZSIsIlRvdWNoYWJsZUhpZ2hsaWdodCIsIlRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIiwiVG91Y2hhYmxlT3BhY2l0eSIsIlRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayIsIlZpZXciLCJWaWV3UGFnZXJBbmRyb2lkIiwiVmlydHVhbGl6ZWRMaXN0IiwiV2ViVmlldyIsIkFjdGlvblNoZWV0SU9TIiwiQWxlcnQiLCJBbGVydElPUyIsIkFuaW1hdGVkIiwiQXBwUmVnaXN0cnkiLCJBcHBTdGF0ZSIsIkFzeW5jU3RvcmFnZSIsIkJhY2tBbmRyb2lkIiwiQmFja0hhbmRsZXIiLCJDYW1lcmFSb2xsIiwiQ2xpcGJvYXJkIiwiRGF0ZVBpY2tlckFuZHJvaWQiLCJEZXZpY2VJbmZvIiwiRGltZW5zaW9ucyIsIkVhc2luZyIsImZpbmROb2RlSGFuZGxlIiwiSTE4bk1hbmFnZXIiLCJJbWFnZVBpY2tlcklPUyIsIkludGVyYWN0aW9uTWFuYWdlciIsIktleWJvYXJkIiwiTGF5b3V0QW5pbWF0aW9uIiwiTGlua2luZyIsIk5hdGl2ZUV2ZW50RW1pdHRlciIsIk5ldEluZm8iLCJQYW5SZXNwb25kZXIiLCJQZXJtaXNzaW9uc0FuZHJvaWQiLCJQaXhlbFJhdGlvIiwiUHVzaE5vdGlmaWNhdGlvbklPUyIsIlNldHRpbmdzIiwiU2hhcmUiLCJTdGF0dXNCYXJJT1MiLCJTdHlsZVNoZWV0IiwiU3lzdHJhY2UiLCJUaW1lUGlja2VyQW5kcm9pZCIsIlRWRXZlbnRIYW5kbGVyIiwiVUlNYW5hZ2VyIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJWaWJyYXRpb24iLCJWaWJyYXRpb25JT1MiLCJZZWxsb3dCb3giLCJEZXZpY2VFdmVudEVtaXR0ZXIiLCJOYXRpdmVBcHBFdmVudEVtaXR0ZXIiLCJOYXRpdmVNb2R1bGVzIiwiUGxhdGZvcm0iLCJwcm9jZXNzQ29sb3IiLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwidGFrZVNuYXBzaG90IiwiQ29sb3JQcm9wVHlwZSIsIkVkZ2VJbnNldHNQcm9wVHlwZSIsIlBvaW50UHJvcFR5cGUiLCJWaWV3UHJvcFR5cGVzIiwiTmF2aWdhdG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVVBOztBQUVBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXpCLEMsQ0FFQTs7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHO0FBQ2xCO0FBQ0EsTUFBSUMsaUJBQUosR0FBd0I7QUFDdEIsV0FBT0YsT0FBTyxDQUFDLG1CQUFELENBQWQ7QUFDRCxHQUppQjs7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QUFkO0FBQ0QsR0FuUmlCOztBQW9SbEIsTUFBSTRGLFFBQUosR0FBZTtBQUNiLFdBQU81RixPQUFPLENBQUMsVUFBRCxDQUFkO0FBQ0QsR0F0UmlCOztBQXVSbEIsTUFBSTZGLFlBQUosR0FBbUI7QUFDakIsV0FBTzdGLE9BQU8sQ0FBQyxjQUFELENBQWQ7QUFDRCxHQXpSaUI7O0FBMFJsQixNQUFJOEYsc0JBQUosR0FBNkI7QUFDM0IsV0FBTzlGLE9BQU8sQ0FBQyx3QkFBRCxDQUFkO0FBQ0QsR0E1UmlCOztBQTZSbEIsTUFBSStGLFlBQUosR0FBbUI7QUFDakIsV0FBTy9GLE9BQU8sQ0FBQyxjQUFELENBQWQ7QUFDRCxHQS9SaUI7O0FBaVNsQjtBQUNBLE1BQUlnRyxhQUFKLEdBQW9CO0FBQ2xCLFdBQU9oRyxPQUFPLENBQUMsZUFBRCxDQUFkO0FBQ0QsR0FwU2lCOztBQXFTbEIsTUFBSWlHLGtCQUFKLEdBQXlCO0FBQ3ZCLFdBQU9qRyxPQUFPLENBQUMsb0JBQUQsQ0FBZDtBQUNELEdBdlNpQjs7QUF3U2xCLE1BQUlrRyxhQUFKLEdBQW9CO0FBQ2xCLFdBQU9sRyxPQUFPLENBQUMsZUFBRCxDQUFkO0FBQ0QsR0ExU2lCOztBQTJTbEIsTUFBSW1HLGFBQUosR0FBb0I7QUFDbEIsV0FBT25HLE9BQU8sQ0FBQyxlQUFELENBQWQ7QUFDRCxHQTdTaUI7O0FBK1NsQjtBQUNBLE1BQUlvRyxTQUFKLEdBQWdCO0FBQ2RyRyxJQUFBQSxTQUFTLENBQ1AsS0FETyxFQUVQLDZGQUNFLDJGQURGLEdBRUUsNkdBSkssQ0FBVDtBQU1EOztBQXZUaUIsQ0FBcEI7QUEwVEFzRyxNQUFNLENBQUNDLE9BQVAsR0FBaUJyRyxXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vLyBFeHBvcnQgUmVhY3QsIHBsdXMgc29tZSBuYXRpdmUgYWRkaXRpb25zLlxuY29uc3QgUmVhY3ROYXRpdmUgPSB7XG4gIC8vIENvbXBvbmVudHNcbiAgZ2V0IEFjY2Vzc2liaWxpdHlJbmZvKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdBY2Nlc3NpYmlsaXR5SW5mbycpO1xuICB9LFxuICBnZXQgQWN0aXZpdHlJbmRpY2F0b3IoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0FjdGl2aXR5SW5kaWNhdG9yJyk7XG4gIH0sXG4gIGdldCBBUlQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1JlYWN0TmF0aXZlQVJUJyk7XG4gIH0sXG4gIGdldCBCdXR0b24oKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0J1dHRvbicpO1xuICB9LFxuICBnZXQgQ2hlY2tCb3goKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0NoZWNrQm94Jyk7XG4gIH0sXG4gIGdldCBEYXRlUGlja2VySU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdEYXRlUGlja2VySU9TJyk7XG4gIH0sXG4gIGdldCBEcmF3ZXJMYXlvdXRBbmRyb2lkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdEcmF3ZXJMYXlvdXRBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBGbGF0TGlzdCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnRmxhdExpc3QnKTtcbiAgfSxcbiAgZ2V0IEltYWdlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdJbWFnZScpO1xuICB9LFxuICBnZXQgSW1hZ2VCYWNrZ3JvdW5kKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdJbWFnZUJhY2tncm91bmQnKTtcbiAgfSxcbiAgZ2V0IEltYWdlRWRpdG9yKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdJbWFnZUVkaXRvcicpO1xuICB9LFxuICBnZXQgSW1hZ2VTdG9yZSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnSW1hZ2VTdG9yZScpO1xuICB9LFxuICBnZXQgSW5wdXRBY2Nlc3NvcnlWaWV3KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdJbnB1dEFjY2Vzc29yeVZpZXcnKTtcbiAgfSxcbiAgZ2V0IEtleWJvYXJkQXZvaWRpbmdWaWV3KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdLZXlib2FyZEF2b2lkaW5nVmlldycpO1xuICB9LFxuICBnZXQgTGlzdFZpZXcoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0xpc3RWaWV3Jyk7XG4gIH0sXG4gIGdldCBNYXNrZWRWaWV3SU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdNYXNrZWRWaWV3SU9TJyk7XG4gIH0sXG4gIGdldCBNb2RhbCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnTW9kYWwnKTtcbiAgfSxcbiAgZ2V0IE5hdmlnYXRvcklPUygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnTmF2aWdhdG9ySU9TJyk7XG4gIH0sXG4gIGdldCBQaWNrZXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1BpY2tlcicpO1xuICB9LFxuICBnZXQgUGlja2VySU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdQaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IFByb2dyZXNzQmFyQW5kcm9pZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnUHJvZ3Jlc3NCYXJBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBQcm9ncmVzc1ZpZXdJT1MoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1Byb2dyZXNzVmlld0lPUycpO1xuICB9LFxuICBnZXQgU2FmZUFyZWFWaWV3KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdTYWZlQXJlYVZpZXcnKTtcbiAgfSxcbiAgZ2V0IFNjcm9sbFZpZXcoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1Njcm9sbFZpZXcnKTtcbiAgfSxcbiAgZ2V0IFNlY3Rpb25MaXN0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdTZWN0aW9uTGlzdCcpO1xuICB9LFxuICBnZXQgU2VnbWVudGVkQ29udHJvbElPUygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnU2VnbWVudGVkQ29udHJvbElPUycpO1xuICB9LFxuICBnZXQgU2xpZGVyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdTbGlkZXInKTtcbiAgfSxcbiAgZ2V0IFNuYXBzaG90Vmlld0lPUygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnU25hcHNob3RWaWV3SU9TJyk7XG4gIH0sXG4gIGdldCBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1N3aXRjaCcpO1xuICB9LFxuICBnZXQgUmVmcmVzaENvbnRyb2woKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1JlZnJlc2hDb250cm9sJyk7XG4gIH0sXG4gIGdldCBTdGF0dXNCYXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1N0YXR1c0JhcicpO1xuICB9LFxuICBnZXQgU3dpcGVhYmxlRmxhdExpc3QoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1N3aXBlYWJsZUZsYXRMaXN0Jyk7XG4gIH0sXG4gIGdldCBTd2lwZWFibGVMaXN0VmlldygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnU3dpcGVhYmxlTGlzdFZpZXcnKTtcbiAgfSxcbiAgZ2V0IFRhYkJhcklPUygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVGFiQmFySU9TJyk7XG4gIH0sXG4gIGdldCBUZXh0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdUZXh0Jyk7XG4gIH0sXG4gIGdldCBUZXh0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1RleHRJbnB1dCcpO1xuICB9LFxuICBnZXQgVG9hc3RBbmRyb2lkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdUb2FzdEFuZHJvaWQnKTtcbiAgfSxcbiAgZ2V0IFRvb2xiYXJBbmRyb2lkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdUb29sYmFyQW5kcm9pZCcpO1xuICB9LFxuICBnZXQgVG91Y2hhYmxlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdUb3VjaGFibGUnKTtcbiAgfSxcbiAgZ2V0IFRvdWNoYWJsZUhpZ2hsaWdodCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVG91Y2hhYmxlSGlnaGxpZ2h0Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVOYXRpdmVGZWVkYmFjaygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2snKTtcbiAgfSxcbiAgZ2V0IFRvdWNoYWJsZU9wYWNpdHkoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1RvdWNoYWJsZU9wYWNpdHknKTtcbiAgfSxcbiAgZ2V0IFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrJyk7XG4gIH0sXG4gIGdldCBWaWV3KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdWaWV3Jyk7XG4gIH0sXG4gIGdldCBWaWV3UGFnZXJBbmRyb2lkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdWaWV3UGFnZXJBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBWaXJ0dWFsaXplZExpc3QoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1ZpcnR1YWxpemVkTGlzdCcpO1xuICB9LFxuICBnZXQgV2ViVmlldygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnV2ViVmlldycpO1xuICB9LFxuXG4gIC8vIEFQSXNcbiAgZ2V0IEFjdGlvblNoZWV0SU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdBY3Rpb25TaGVldElPUycpO1xuICB9LFxuICBnZXQgQWxlcnQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0FsZXJ0Jyk7XG4gIH0sXG4gIGdldCBBbGVydElPUygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnQWxlcnRJT1MnKTtcbiAgfSxcbiAgZ2V0IEFuaW1hdGVkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdBbmltYXRlZCcpO1xuICB9LFxuICBnZXQgQXBwUmVnaXN0cnkoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0FwcFJlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBBcHBTdGF0ZSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnQXBwU3RhdGUnKTtcbiAgfSxcbiAgZ2V0IEFzeW5jU3RvcmFnZSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnQXN5bmNTdG9yYWdlJyk7XG4gIH0sXG4gIGdldCBCYWNrQW5kcm9pZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnQmFja0FuZHJvaWQnKTtcbiAgfSwgLy8gZGVwcmVjYXRlZDogdXNlIEJhY2tIYW5kbGVyIGluc3RlYWRcbiAgZ2V0IEJhY2tIYW5kbGVyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdCYWNrSGFuZGxlcicpO1xuICB9LFxuICBnZXQgQ2FtZXJhUm9sbCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnQ2FtZXJhUm9sbCcpO1xuICB9LFxuICBnZXQgQ2xpcGJvYXJkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdDbGlwYm9hcmQnKTtcbiAgfSxcbiAgZ2V0IERhdGVQaWNrZXJBbmRyb2lkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdEYXRlUGlja2VyQW5kcm9pZCcpO1xuICB9LFxuICBnZXQgRGV2aWNlSW5mbygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnRGV2aWNlSW5mbycpO1xuICB9LFxuICBnZXQgRGltZW5zaW9ucygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnRGltZW5zaW9ucycpO1xuICB9LFxuICBnZXQgRWFzaW5nKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdFYXNpbmcnKTtcbiAgfSxcbiAgZ2V0IGZpbmROb2RlSGFuZGxlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdSZWFjdE5hdGl2ZScpLmZpbmROb2RlSGFuZGxlO1xuICB9LFxuICBnZXQgSTE4bk1hbmFnZXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ0kxOG5NYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBJbWFnZVBpY2tlcklPUygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnSW1hZ2VQaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IEludGVyYWN0aW9uTWFuYWdlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnSW50ZXJhY3Rpb25NYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBLZXlib2FyZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnS2V5Ym9hcmQnKTtcbiAgfSxcbiAgZ2V0IExheW91dEFuaW1hdGlvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnTGF5b3V0QW5pbWF0aW9uJyk7XG4gIH0sXG4gIGdldCBMaW5raW5nKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdMaW5raW5nJyk7XG4gIH0sXG4gIGdldCBOYXRpdmVFdmVudEVtaXR0ZXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ05hdGl2ZUV2ZW50RW1pdHRlcicpO1xuICB9LFxuICBnZXQgTmV0SW5mbygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnTmV0SW5mbycpO1xuICB9LFxuICBnZXQgUGFuUmVzcG9uZGVyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdQYW5SZXNwb25kZXInKTtcbiAgfSxcbiAgZ2V0IFBlcm1pc3Npb25zQW5kcm9pZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnUGVybWlzc2lvbnNBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBQaXhlbFJhdGlvKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdQaXhlbFJhdGlvJyk7XG4gIH0sXG4gIGdldCBQdXNoTm90aWZpY2F0aW9uSU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdQdXNoTm90aWZpY2F0aW9uSU9TJyk7XG4gIH0sXG4gIGdldCBTZXR0aW5ncygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnU2V0dGluZ3MnKTtcbiAgfSxcbiAgZ2V0IFNoYXJlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdTaGFyZScpO1xuICB9LFxuICBnZXQgU3RhdHVzQmFySU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdTdGF0dXNCYXJJT1MnKTtcbiAgfSxcbiAgZ2V0IFN0eWxlU2hlZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1N0eWxlU2hlZXQnKTtcbiAgfSxcbiAgZ2V0IFN5c3RyYWNlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdTeXN0cmFjZScpO1xuICB9LFxuICBnZXQgVGltZVBpY2tlckFuZHJvaWQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1RpbWVQaWNrZXJBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBUVkV2ZW50SGFuZGxlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVFZFdmVudEhhbmRsZXInKTtcbiAgfSxcbiAgZ2V0IFVJTWFuYWdlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVUlNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnUmVhY3ROYXRpdmUnKS51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcztcbiAgfSxcbiAgZ2V0IFZpYnJhdGlvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnVmlicmF0aW9uJyk7XG4gIH0sXG4gIGdldCBWaWJyYXRpb25JT1MoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1ZpYnJhdGlvbklPUycpO1xuICB9LFxuICBnZXQgWWVsbG93Qm94KCkge1xuICAgIHJldHVybiByZXF1aXJlKCdZZWxsb3dCb3gnKTtcbiAgfSxcblxuICAvLyBQbHVnaW5zXG4gIGdldCBEZXZpY2VFdmVudEVtaXR0ZXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1JDVERldmljZUV2ZW50RW1pdHRlcicpO1xuICB9LFxuICBnZXQgTmF0aXZlQXBwRXZlbnRFbWl0dGVyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdSQ1ROYXRpdmVBcHBFdmVudEVtaXR0ZXInKTtcbiAgfSxcbiAgZ2V0IE5hdGl2ZU1vZHVsZXMoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ05hdGl2ZU1vZHVsZXMnKTtcbiAgfSxcbiAgZ2V0IFBsYXRmb3JtKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdQbGF0Zm9ybScpO1xuICB9LFxuICBnZXQgcHJvY2Vzc0NvbG9yKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdwcm9jZXNzQ29sb3InKTtcbiAgfSxcbiAgZ2V0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ3JlcXVpcmVOYXRpdmVDb21wb25lbnQnKTtcbiAgfSxcbiAgZ2V0IHRha2VTbmFwc2hvdCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgndGFrZVNuYXBzaG90Jyk7XG4gIH0sXG5cbiAgLy8gUHJvcCBUeXBlc1xuICBnZXQgQ29sb3JQcm9wVHlwZSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnQ29sb3JQcm9wVHlwZScpO1xuICB9LFxuICBnZXQgRWRnZUluc2V0c1Byb3BUeXBlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCdFZGdlSW5zZXRzUHJvcFR5cGUnKTtcbiAgfSxcbiAgZ2V0IFBvaW50UHJvcFR5cGUoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1BvaW50UHJvcFR5cGUnKTtcbiAgfSxcbiAgZ2V0IFZpZXdQcm9wVHlwZXMoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ1ZpZXdQcm9wVHlwZXMnKTtcbiAgfSxcblxuICAvLyBEZXByZWNhdGVkXG4gIGdldCBOYXZpZ2F0b3IoKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnTmF2aWdhdG9yIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGlzIHBhY2thZ2UuIEl0IGNhbiBub3cgYmUgaW5zdGFsbGVkICcgK1xuICAgICAgICAnYW5kIGltcG9ydGVkIGZyb20gYHJlYWN0LW5hdGl2ZS1kZXByZWNhdGVkLWN1c3RvbS1jb21wb25lbnRzYCBpbnN0ZWFkIG9mIGByZWFjdC1uYXRpdmVgLiAnICtcbiAgICAgICAgJ0xlYXJuIGFib3V0IGFsdGVybmF0aXZlIG5hdmlnYXRpb24gc29sdXRpb25zIGF0IGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvbmF2aWdhdGlvbi5odG1sJyxcbiAgICApO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZTtcbiJdfQ==